[
  {
    "objectID": "TS1.html",
    "href": "TS1.html",
    "title": "Working With Time Series Data in R",
    "section": "",
    "text": "When analyzing time series data in R there are some important steps to follow. Below is example code that loads BTC data and creates a time series object to analyze.\n\n\n\n\nBe careful and always follow these steps.\n\n\n\n\nStart by cleaning the directory and loading the necessary packages.\n\n\n\n\nContinue by loading the data into R by using the read_csv() function and making sure you put the path in quotations.\n\n\n\n\nLastly, make sure that the Date variable is recognized in the format month/day/year by using the mdy() function and specifying it as the index for in the tsibble() function.\n\n\n\n\n\n\n\nrm(list=ls())\nlibrary(tidyverse)\nlibrary(fpp3)\nlibrary(ggthemes)\n\nBTC&lt;-read_csv(\"https://jagelves.github.io/Data/BTC_USD.csv\")\n\nBTC_ts &lt;- BTC %&gt;%\n  mutate(Date = mdy(Date)) %&gt;%\n  as_tsibble(index = Date)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a website with a collection of quick tutorials."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scrolly",
    "section": "",
    "text": "This website offers a collection of tutorials covering R programming, statistics, probability, economics, and more. Browse the topics below to start exploring!"
  },
  {
    "objectID": "index.html#time-series",
    "href": "index.html#time-series",
    "title": "Scrolly",
    "section": "Time Series",
    "text": "Time Series\nUploading time series data in R TS1"
  },
  {
    "objectID": "Bronco.html",
    "href": "Bronco.html",
    "title": "The Bronco Wine Company",
    "section": "",
    "text": "To solve this problem using simulation it’s important to identify the inputs, the objective, make some calculations to arrive to your objective, and use repetitions so that the solution is stable.\n\n\n\n\nStart by including all the inputs provided by the problem in your R code.\n\n\n\n\nIn particular, the demand is modeled using the triangular distribution with minimum of 500, maximum of 2500 and mode of 1500.\n\n\n\n\nThe number of bottles the company can supply in any given period is uncertain. The supply is modeled using the beta distribution with an alpha of 2 and beta of 5. This number provides a percentage of max production\n\n\n\n\nThe max production capacity for the winery is 3000 bottles.\n\n\n\n\nMake sure to also include the costs of production for your simulation.\n\n\n\n\nNow start your simulation by setting the number of simulations you want to generate. Modern computers can handle several simulations. So don’t be afraid to ramp this up as it ensures our results are stable.\n\n\n\n\nThe production targets you want to test.\n\n\n\n\nAnd an empty vector to collect the profits generated by each production target suggested.\n\n\n\n\nNow set a for loop to test all of your production target and begin your simulation.\n\n\n\n\nEach variable included in the tibble generates a column of values, where each row has a simulated value.\n\n\n\n\nFor example this line of code generates a column with simulated demands from the triangular distribution.\n\n\n\n\nAnd this one compares the target production with the max capacity for the winery in a given period, and returns the minimum.\n\n\n\n\nAt the end of the loop make sure you add the mean profit to your vector of profits.\n\n\n\n\nWith the results in your profits vector, you can now create a table with the mean profits for each production target.\n\n\n\n\nAnd calculate quartiles for your simulation\n\n\n\n\n\n\n\nlibrary(extraDistr)\nlibrary(tidyverse)\nlibrary(gt)\nrm(list=ls())\n\n# Part 1: Demand modeled by a Triangular Distribution\nmin &lt;- 500\nmode &lt;- 1500\nmax &lt;- 2500\n\n# Part 2: Supply modeled by a Beta Distribution\nalpha &lt;- 2\nbeta &lt;- 5\nmax_capacity &lt;- 3000\n\n\n\n\n# Cost and revenue parameters\nfixed_cost &lt;- 10000\nvariable_cost &lt;- 15\nselling_price &lt;- 100\nsalvage_value &lt;- 30\n\n\n\n\nnsim &lt;- 1000000\n\nproduction_targets &lt;- seq(1000, 3000, by = 500)\nprofits&lt;-c()\n# simulation\n\nfor (i in production_targets){\nsimulation&lt;-tibble(\n  demand=round(rtriang(nsim,min,max,mode),0),\n  max_production=round(rbeta(nsim,alpha,beta)*3000,0),\n  actual_production = map2_dbl(.x = max_production,\n                                    .y = i, \n                                    .f = ~ min(.x, .y)),\n  units_sold = map2_dbl(.x = demand, \n                             .y = actual_production, \n                             .f = ~ min(.x, .y)),\n  leftover_units = map2_dbl(.x = actual_production, \n                                  .y = units_sold, \n                                  .f = ~ max(.x-.y, 0)),\n  revenue = units_sold * selling_price,\n  production_cost = fixed_cost + actual_production * variable_cost,\n  salvage_revenue = map2_dbl(.x = leftover_units, \n                                  .y = 1000, \n                                  .f = ~ min(.x, .y)*salvage_value),\n  profit=revenue-production_cost+salvage_revenue)\n\nprofits=c(profits,mean(simulation$profit))\n}\n\n\n\n\n\n\n\n\n\n\n\nproduction_targets\nprofits\n\n\n\n\n1000\n50520.35\n\n\n1500\n57712.54\n\n\n2000\n58783.24\n\n\n2500\n58732.31\n\n\n3000\n58780.92\n\n\n\n\n\n\n\n\n\n\n\n    0%    25%    50%    75%   100% \n -9915  31140  56300  83245 199955"
  },
  {
    "objectID": "index.html#simulation",
    "href": "index.html#simulation",
    "title": "Scrolly",
    "section": "Simulation",
    "text": "Simulation\nThe Bronco Wine Company Bronco"
  },
  {
    "objectID": "Summary.html",
    "href": "Summary.html",
    "title": "Summarizing Data With Tidyverse",
    "section": "",
    "text": "Let’s learn how to summarize data by groups.\n\n\n\n\nSometimes, data has different dimensions that allow us to group observations. For example, this dataset records the total power generated by each participant in a spin class. The gender and instructor variables both have distinct categories we can use for grouping.\n\n\n\n\nGrouping data by a variable’s dimensions enables us to compare descriptive statistics across different groups. Suppose we want to compare the performance of class participants between Sam and Olivia. We can first group the data by instructor and then calculate the mean power generated to see how their average class efforts differ.\n\n\n\n\nThis code calculates the mean power output for each instructor. It works as follows:\n\n\n\n\nFirst, we define the tibble (spin) and specify how to group the data. The group_by() function determines which variable to use for grouping. Since there are only two instructors (Sam and Olivia), two groups will be created. Note: The grouping is done implicitly.\n\n\n\n\nNext, we use the summarise() function to define how to summarize each group. Inside the function, we assign meaningful names to our output columns and apply corresponding summary functions. For class size, we use the name Size and assign the n() to count the number of observations under each instructor (grouping). The MeanPower column calculates the average Total_kj generated in each instructor’s class.\n\n\n\n\nThe resulting table shows how many participants attended each instructor’s class and their average power output (i.e., effort). Looks like Olivia pushes her 30 students hard!\n\n\n\n\nWe can now use the summary statistic to help us choose the right instructor.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# A tibble: 5 × 3\n  Total_kj Gender Instructor\n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1       96 F      Sam       \n2      209 F      Olivia    \n3      200 F      Sam       \n4      184 F      Olivia    \n5      170 M      Sam       \n\n\n\n\n\n\n\n\n\n\n\n\nspin %&gt;% group_by(Instructor) %&gt;% \nsummarise(Size=n(),\n          MeanPower=mean(Total_kj)\n)\n\n\n\n\n\n# A tibble: 2 × 3\n  Instructor  Size MeanPower\n  &lt;chr&gt;      &lt;int&gt;     &lt;dbl&gt;\n1 Olivia        30      197.\n2 Sam           30      121."
  },
  {
    "objectID": "index.html#summarizing-data",
    "href": "index.html#summarizing-data",
    "title": "Scrolly",
    "section": "Summarizing Data",
    "text": "Summarizing Data\nSummarizing With Tidyverse Summary"
  },
  {
    "objectID": "Piping.html",
    "href": "Piping.html",
    "title": "The Piping Operator (%>%)",
    "section": "",
    "text": "Let’s learn how to use the pipe operator %&gt;% in Tidyverse.\n\n\n\n\nWhen working with data in R, we often perform multiple operations sequentially. Instead of nesting functions, we can use the pipe operator %&gt;% to make the code more readable and intuitive.\n\n\n\n\nLet’s load some data on a spin class (stationary bike exercise). This code loads the tidyverse package and the spin data.\n\n\n\n\nIf we wanted to find the average output for male participants we can use the filter() and the mean() functions. However, we would have to first create an object with the filtered data and then use the $ to find the mean of the variable.\n\n\n\n\nThis code uses the piping operator %&gt;%. Piping allows us to send the result of one function directly into the next, improving clarity and reducing the need for intermediate variables.\n\n\n\n\nThis is how piping works. First, we define the dataset (spin) and then we filter for only Males using the filter() function. Note that the %&gt;% operator can be read as “then”.\n\n\n\n\nThen we summarize the data using the summarise() function to compute the mean power output.\n\n\n\n\nBy using the pipe operator, we avoid unnecessary temporary objects and make the logic easier to follow.\n\n\n\n\nThe final result shows a tibble with the average power output for Males. Use %&gt;% to keep your code clean and readable!\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nspin&lt;-read_csv(\"https://jagelves.github.io/Data/Spin.csv\")\n\n\n\n\nmale&lt;-filter(spin, Gender==\"M\")\nmean(male$Total_kj)\n\n\n\n\nspin %&gt;% filter(Gender==\"M\") %&gt;% \n  summarise(mean(Total_kj))\n\n\n\n\n\n# A tibble: 1 × 1\n  `mean(Total_kj)`\n             &lt;dbl&gt;\n1             186."
  },
  {
    "objectID": "index.html#the-piping-operator",
    "href": "index.html#the-piping-operator",
    "title": "Scrolly",
    "section": "The Piping Operator",
    "text": "The Piping Operator\nUsing the Piping Operator in R. Piping"
  }
]